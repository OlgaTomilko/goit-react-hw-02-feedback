{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Feedback/Feedback.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","id","onClick","toUpperCase","slice","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Feedback","useState","feedback","setFeedback","countTotalFeedback","Object","keys","event","target","prevState","positive","Math","round","countPositiveFeedbackPercentage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPA0BeA,EAxBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAACC,GACZ,OACE,wBACEC,KAAK,SACLC,GAAIF,EACJG,QAASL,EAHX,SAMGE,EAAO,GAAGI,cAAgBJ,EAAOK,MAAM,IAFnCL,SCDFM,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCsBEC,EAtBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OAAiB,IAAVD,EACL,cAAC,EAAD,CAAcL,QAAS,sBAEvB,gCACE,uCAAUE,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCISC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,6BAAKD,IACJC,MC2GQC,EA3GE,WAAO,IAAD,EACWC,mBAAS,CACvCT,KAAM,EACNC,QAAS,EACTC,IAAK,IAJc,mBACdQ,EADc,KACJC,EADI,KAoBfC,EAAqB,WAEzB,OADcF,EAASV,KAAOU,EAAST,QAAUS,EAASR,KAW5D,OACE,gCACE,cAAC,EAAD,CAASI,MAAO,uBAAhB,SACE,cAAC,EAAD,CACElB,QA5BOyB,OAAOC,KAAKJ,GA6BnBrB,gBAzBgB,SAAC0B,GACvB,IAAMxB,EAASwB,EAAMC,OAAOvB,GAC5BkB,GAAY,SAACM,GAAD,mBAAC,eACRA,GADO,kBAET1B,EAAS0B,EAAU1B,GAAU,YAwB9B,cAAC,EAAD,CAASe,MAAO,aAAhB,SACE,cAAC,EAAD,CACEN,KAAMU,EAASV,KACfC,QAASS,EAAST,QAClBC,IAAKQ,EAASR,IACdC,MAAOS,IACPR,mBArBgC,WACtC,IAAMD,EAAQS,IACRM,EAAWR,EAASV,KAE1B,OADmBmB,KAAKC,MAAOF,EAAWf,EAAS,KAkBzBkB,WC9CfC,MAJf,WACE,OAAO,cAAC,EAAD,KCETC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.36efe625.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <div>\r\n      {options.map((option) => {\r\n        return (\r\n          <button\r\n            type=\"button\"\r\n            id={option}\r\n            onClick={onLeaveFeedback}\r\n            key={option}\r\n          >\r\n            {option[0].toUpperCase() + option.slice(1)}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import Notification from \"../Notification/Notification\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return total === 0 ? (\r\n    <Notification message={\"No feedback given\"} />\r\n  ) : (\r\n    <div>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback: {positivePercentage}%</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","// import React, { Component } from \"react\";\r\nimport React, { useState } from \"react\";\r\nimport FeedbackOptions from \"../FeedbackOptions/FeedbackOptions\";\r\nimport Statistics from \"../Statistics/Statistics\";\r\nimport Section from \"../Section/Section\";\r\n\r\nconst Feedback = () => {\r\n  const [feedback, setFeedback] = useState({\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  });\r\n\r\n  const handleKeys = () => {\r\n    const keys = Object.keys(feedback);\r\n    return keys;\r\n  };\r\n\r\n  const handleIncrement = (event) => {\r\n    const option = event.target.id;\r\n    setFeedback((prevState) => ({\r\n      ...prevState,\r\n      [option]: prevState[option] + 1,\r\n    }));\r\n  };\r\n\r\n  const countTotalFeedback = () => {\r\n    const total = feedback.good + feedback.neutral + feedback.bad;\r\n    return total;\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    const total = countTotalFeedback();\r\n    const positive = feedback.good;\r\n    const percentage = Math.round((positive / total) * 100);\r\n    return percentage;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Section title={\"Please live feedback\"}>\r\n        <FeedbackOptions\r\n          options={handleKeys()}\r\n          onLeaveFeedback={handleIncrement}\r\n        />\r\n      </Section>\r\n      <Section title={\"Statistics\"}>\r\n        <Statistics\r\n          good={feedback.good}\r\n          neutral={feedback.neutral}\r\n          bad={feedback.bad}\r\n          total={countTotalFeedback()}\r\n          positivePercentage={countPositiveFeedbackPercentage()}\r\n        />\r\n      </Section>\r\n    </div>\r\n  );\r\n};\r\n\r\n// class Feedback extends Component {\r\n//   state = {\r\n//     good: 0,\r\n//     neutral: 0,\r\n//     bad: 0,\r\n//   };\r\n\r\n//   handleKeys() {\r\n//     const keys = Object.keys(this.state);\r\n//     return keys;\r\n//   }\r\n\r\n//   handleIncrement = (event) => {\r\n//     const option = event.target.id;\r\n//     this.setState((prevState) => ({\r\n//       [option]: prevState[option] + 1,\r\n//     }));\r\n//   };\r\n\r\n//   countTotalFeedback() {\r\n//     const total = this.state.good + this.state.neutral + this.state.bad;\r\n//     return total;\r\n//   }\r\n\r\n//   countPositiveFeedbackPercentage() {\r\n//     const total = this.countTotalFeedback();\r\n//     const positive = this.state.good;\r\n//     const percentage = Math.round((positive / total) * 100);\r\n//     return percentage;\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <Section title={\"Please live feedback\"}>\r\n//           <FeedbackOptions\r\n//             options={this.handleKeys()}\r\n//             onLeaveFeedback={this.handleIncrement}\r\n//           />\r\n//         </Section>\r\n//         <Section title={\"Statistics\"}>\r\n//           <Statistics\r\n//             good={this.state.good}\r\n//             neutral={this.state.neutral}\r\n//             bad={this.state.bad}\r\n//             total={this.countTotalFeedback()}\r\n//             positivePercentage={this.countPositiveFeedbackPercentage()}\r\n//           />\r\n//         </Section>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default Feedback;\r\n","import Feedback from \"./components/Feedback/Feedback\";\n\nfunction App() {\n  return <Feedback />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}